#include <Servo.h>
#include <NewPing.h>

// –ü–∏–Ω—ã –¥–ª—è —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
#define TRIG_PIN_FRONT 12
#define ECHO_PIN_FRONT 11
#define TRIG_PIN_LEFT 10
#define ECHO_PIN_LEFT 9
#define TRIG_PIN_RIGHT 8
#define ECHO_PIN_RIGHT 7

// –ü–∏–Ω—ã –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è)
#define MOTOR_A_EN 5
#define MOTOR_A_IN1 4
#define MOTOR_A_IN2 3
#define MOTOR_B_EN 6
#define MOTOR_B_IN1 2
#define MOTOR_B_IN2 1

// –ü–∏–Ω—ã –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞ –∏ –¥–∞—Ç—á–∏–∫–æ–≤
#define SERVO_PIN 13
#define PIR_SENSOR A0
#define IR_SENSOR A1
#define BUZZER_PIN A2
#define LED_PIN A3

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ (—Å–º)
#define MAX_DISTANCE 200

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤
NewPing sonarFront(TRIG_PIN_FRONT, ECHO_PIN_FRONT, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);

Servo headServo;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤
struct SensorData {
  int frontDist;
  int leftDist;
  int rightDist;
  int pirValue;
  int irValue;
  unsigned long timestamp;
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
int currentAngle = 90;
int searchDirection = 1;
unsigned long lastDetectionTime = 0;
unsigned long lastScanTime = 0;
unsigned long lastMoveTime = 0;
bool personDetected = false;
int detectionCount = 0;
int searchPhase = 0;

// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
const int PERSON_DISTANCE = 100;    // —Å–º
const int CLOSE_DISTANCE = 50;      // —Å–º –¥–ª—è –±–ª–∏–∑–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
const int OBSTACLE_DISTANCE = 25;   // —Å–º (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
const int HEAT_THRESHOLD = 500;     // –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ö-–¥–∞—Ç—á–∏–∫–∞
const unsigned long SCAN_INTERVAL = 200;  // –º—Å
const unsigned long MOVE_INTERVAL = 300;  // –º—Å

// –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
class SimpleKalman {
  private:
    float Q = 0.1;   // —à—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞
    float R = 0.1;   // —à—É–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
    float P = 1.0;   // –æ—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏
    float X = 0.0;   // –æ—Ü–µ–Ω–∫–∞
  public:
    SimpleKalman(float processNoise = 0.1, float sensorNoise = 0.1, float estimatedError = 1.0) {
      Q = processNoise;
      R = sensorNoise;
      P = estimatedError;
    }
    
    float update(float measurement) {
      // –ü—Ä–æ–≥–Ω–æ–∑
      P = P + Q;
      // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
      float K = P / (P + R);
      X = X + K * (measurement - X);
      P = (1 - K) * P;
      return X;
    }
};

SimpleKalman kalmanFront(0.1, 0.1, 1.0);
SimpleKalman kalmanLeft(0.1, 0.1, 1.0);
SimpleKalman kalmanRight(0.1, 0.1, 1.0);

void setup() {
  Serial.begin(115200); 
  Serial.println("=== –†–æ–±–æ—Ç-–ø–æ–∏—Å–∫–æ–≤–∏–∫ –£–õ–£–ß–®–ï–ù–ù–´–ô –∑–∞–ø—É—â–µ–Ω! ===");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
  pinMode(MOTOR_A_EN, OUTPUT);
  pinMode(MOTOR_A_IN1, OUTPUT);
  pinMode(MOTOR_A_IN2, OUTPUT);
  pinMode(MOTOR_B_EN, OUTPUT);
  pinMode(MOTOR_B_IN1, OUTPUT);
  pinMode(MOTOR_B_IN2, OUTPUT);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤
  pinMode(PIR_SENSOR, INPUT);
  pinMode(IR_SENSOR, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
  headServo.attach(SERVO_PIN);
  headServo.write(currentAngle);
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤
  calibrateSensors();
  
  // –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
  startupSignal();
  
  Serial.println("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...");
}

void calibrateSensors() {
  Serial.println("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤...");
  for(int i = 0; i < 10; i++) {
    getFilteredDistance(sonarFront); // –ü—Ä–æ–≥—Ä–µ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
    delay(50);
  }
}

void startupSignal() {
  // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∑–∞–ø—É—Å–∫–∞
  for(int i = 0; i < 3; i++) {
    digitalWrite(LED_PIN, HIGH);
    tone(BUZZER_PIN, 1000 + i*200, 300);
    delay(400);
    digitalWrite(LED_PIN, LOW);
    delay(150);
  }
  noTone(BUZZER_PIN);
}

void loop() {
  unsigned long currentTime = millis();
  
  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  if (currentTime - lastScanTime >= SCAN_INTERVAL) {
    scanEnvironment();
    lastScanTime = currentTime;
  }
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  if (currentTime - lastMoveTime >= MOVE_INTERVAL) {
    if (personDetected) {
      pursuitMode();
    } else {
      searchMode();
    }
    lastMoveTime = currentTime;
  }
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (currentTime % 2000 == 0) {
    printDebugInfo();
  }
}

void scanEnvironment() {
  // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  currentAngle += (15 * searchDirection);
  if (currentAngle >= 160 || currentAngle <= 20) {
    searchDirection *= -1;
  }
  headServo.write(currentAngle);
  
  // –ß—Ç–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
  SensorData sensors = readSensors();
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  bool ultrasonicDetection = 
    (sensors.frontDist < PERSON_DISTANCE && sensors.frontDist > 5) ||
    (sensors.leftDist < PERSON_DISTANCE && sensors.leftDist > 5) ||
    (sensors.rightDist < PERSON_DISTANCE && sensors.rightDist > 5);
  
  bool sensorDetection = (sensors.pirValue == HIGH) || (sensors.irValue > HEAT_THRESHOLD);
  
  // –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
  int detectionScore = 0;
  if (ultrasonicDetection) detectionScore += 2;
  if (sensorDetection) detectionScore += 1;
  if (sensors.frontDist < CLOSE_DISTANCE) detectionScore += 1;
  
  if (detectionScore >= 3) { // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    detectionCount++;
    if (detectionCount >= 3) {
      if (!personDetected) {
        personDetected = true;
        lastDetectionTime = millis();
        triggerAlarm();
        Serial.println("üö® –ß–ï–õ–û–í–ï–ö –û–ë–ù–ê–†–£–ñ–ï–ù! –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è");
      }
    }
  } else {
    detectionCount = max(0, detectionCount - 1);
  }
  
  // –°–±—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
  if (personDetected && (millis() - lastDetectionTime > 15000)) {
    personDetected = false;
    Serial.println("üîç –ü–æ–∏—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω");
    stopMotors();
  }
}

SensorData readSensors() {
  SensorData data;
  data.frontDist = getFilteredDistance(sonarFront);
  data.leftDist = getFilteredDistance(sonarLeft);
  data.rightDist = getFilteredDistance(sonarRight);
  data.pirValue = digitalRead(PIR_SENSOR);
  data.irValue = analogRead(IR_SENSOR);
  data.timestamp = millis();
  return data;
}

int getFilteredDistance(NewPing &sonar) {
  unsigned int distance = sonar.ping_median(3); // –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
  int cm = sonar.convert_cm(distance);
  if (cm <= 0 || cm > MAX_DISTANCE) return MAX_DISTANCE;
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞
  if (&sonar == &sonarFront) return (int)kalmanFront.update(cm);
  if (&sonar == &sonarLeft) return (int)kalmanLeft.update(cm);
  if (&sonar == &sonarRight) return (int)kalmanRight.update(cm);
  return cm;
}

void searchMode() {
  SensorData sensors = readSensors();
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–±–µ–≥–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
  if (sensors.frontDist < OBSTACLE_DISTANCE && sensors.frontDist > 0) {
    avoidObstacle(sensors);
  } else {
    // –£–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞
    switch (searchPhase) {
      case 0: // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        moveForward(180);
        if (random(0, 100) > 80) searchPhase = 1;
        break;
      case 1: // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
        if (sensors.leftDist > sensors.rightDist) {
          smoothTurn(-120, 1000);
        } else {
          smoothTurn(120, 1000);
        }
        searchPhase = 0;
        break;
    }
  }
}

void pursuitMode() {
  SensorData sensors = readSensors();
  
  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  digitalWrite(LED_PIN, (millis() % 400) < 200);
  if (millis() % 1000 < 100) {
    tone(BUZZER_PIN, 1600, 100);
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  if (sensors.frontDist < PERSON_DISTANCE && sensors.frontDist > OBSTACLE_DISTANCE + 10) {
    // –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π
    int speed = map(sensors.frontDist, OBSTACLE_DISTANCE + 10, PERSON_DISTANCE, 100, 255);
    speed = constrain(speed, 100, 255);
    moveForward(speed);
  } else if (sensors.leftDist < sensors.rightDist && sensors.leftDist > OBSTACLE_DISTANCE) {
    // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ
    smoothTurn(-150, 300);
  } else if (sensors.rightDist > OBSTACLE_DISTANCE) {
    // –ü–ª–∞–≤–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ
    smoothTurn(150, 300);
  } else {
    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ü–µ–ª–∏
    advancedSearchPattern();
  }
}

void avoidObstacle(SensorData sensors) {
  Serial.println("üõë –ò–∑–±–µ–≥–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è");
  
  stopMotors();
  delay(300);
  
  // –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
  if (sensors.leftDist - sensors.rightDist > 20) {
    smoothTurn(-180, 600);
  } else if (sensors.rightDist - sensors.leftDist > 20) {
    smoothTurn(180, 600);
  } else {
    // –û—Ç—ä–µ–∑–¥ –Ω–∞–∑–∞–¥ –ø—Ä–∏ —Ä–∞–≤–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö
    moveBackward(150, 500);
    smoothTurn(200, 800);
  }
}

void smoothTurn(int speed, int duration) {
  if (speed < 0) {
    turnLeft(abs(speed));
  } else {
    turnRight(speed);
  }
  delay(duration);
  stopMotors();
  delay(100);
}

void advancedSearchPattern() {
  Serial.println("üåÄ –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–ª–∏");
  
  // –°–ø–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
  for (int i = 0; i < 4; i++) {
    smoothTurn(150, 400 + i*100);
    stopMotors();
    delay(300);
    scanEnvironment();
    
    smoothTurn(-150, 200);
    stopMotors();
    delay(300);
    scanEnvironment();
  }
}

void triggerAlarm() {
  Serial.println("üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê –¢–†–ï–í–û–ì–ò!");
  
  for (int i = 0; i < 3; i++) {
    digitalWrite(LED_PIN, HIGH);
    tone(BUZZER_PIN, 1800, 400);
    delay(500);
    digitalWrite(LED_PIN, LOW);
    noTone(BUZZER_PIN);
    delay(200);
  }
}

void moveBackward(int speed, int duration) {
  digitalWrite(MOTOR_A_IN1, LOW);
  digitalWrite(MOTOR_A_IN2, HIGH);
  digitalWrite(MOTOR_B_IN1, LOW);
  digitalWrite(MOTOR_B_IN2, HIGH);
  analogWrite(MOTOR_A_EN, speed);
  analogWrite(MOTOR_B_EN, speed);
  delay(duration);
  stopMotors();
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
void moveForward(int speed) {
  digitalWrite(MOTOR_A_IN1, HIGH);
  digitalWrite(MOTOR_A_IN2, LOW);
  digitalWrite(MOTOR_B_IN1, HIGH);
  digitalWrite(MOTOR_B_IN2, LOW);
  analogWrite(MOTOR_A_EN, speed);
  analogWrite(MOTOR_B_EN, speed);
}

void turnLeft(int speed) {
  digitalWrite(MOTOR_A_IN1, LOW);
  digitalWrite(MOTOR_A_IN2, HIGH);
  digitalWrite(MOTOR_B_IN1, HIGH);
  digitalWrite(MOTOR_B_IN2, LOW);
  analogWrite(MOTOR_A_EN, speed);
  analogWrite(MOTOR_B_EN, speed);
}

void turnRight(int speed) {
  digitalWrite(MOTOR_A_IN1, HIGH);
  digitalWrite(MOTOR_A_IN2, LOW);
  digitalWrite(MOTOR_B_IN1, LOW);
  digitalWrite(MOTOR_B_IN2, HIGH);
  analogWrite(MOTOR_A_EN, speed);
  analogWrite(MOTOR_B_EN, speed);
}

void stopMotors() {
  digitalWrite(MOTOR_A_IN1, LOW);
  digitalWrite(MOTOR_A_IN2, LOW);
  digitalWrite(MOTOR_B_IN1, LOW);
  digitalWrite(MOTOR_B_IN2, LOW);
  analogWrite(MOTOR_A_EN, 0);
  analogWrite(MOTOR_B_EN, 0);
}

void printDebugInfo() {
  SensorData sensors = readSensors();
  Serial.println("=== –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===");
  Serial.print("–†–µ–∂–∏–º: ");
  Serial.println(personDetected ? "–ü–†–ï–°–õ–ï–î–û–í–ê–ù–ò–ï" : "–ü–û–ò–°–ö");
  Serial.print("–î–∏—Å—Ç–∞–Ω—Ü–∏–∏: F=");
  Serial.print(sensors.frontDist);
  Serial.print(" L=");
  Serial.print(sensors.leftDist);
  Serial.print(" R=");
  Serial.println(sensors.rightDist);
  Serial.print("PIR: ");
  Serial.print(sensors.pirValue);
  Serial.print(" IR: ");
  Serial.println(sensors.irValue);
  Serial.print("–£–≥–æ–ª —Å–µ—Ä–≤—ã: ");
  Serial.println(currentAngle);
  Serial.println("======================");
}
